    // for (std::shared_ptr<bunny> bun : MyBunnyList) // This is an loop!
    // std::cout << MyBunnyList.size() << std::endl; 


 
 
 // MyBunnyList[1]->name;
    /*for (int j = 0; j < radioactiveInfection; j++)
    {

        std::list<std::shared_ptr<bunny>>::iterator k = MyBunnyList.begin(); //+randomNumber;

        do
        {
            // int randomNumber = rand() % MyBunnyList.size();

            // traversing the list by the random number

            // std::advance(k, randomNumber);               // travering using 'advance' keyword
            std::cout << (*k)->radioactive << std::endl; // If ever at mem address - should be able to deref ..
            if ((*k)->i_radioactive == false)
            {
                std::cout << "one more radioactive bunny" << std::endl;
                (*k)->SetRadioactive();
                true;
            }
            else
            {
                false;
            }
            // flip radioactive bool
            //  Then need to delete *k - somehow
            //  std::cout << *i << std::endl;
        } while (false);

        // how do i get to a random point in my list??
    }*/



                // traversing the list by the random number

            // std::advance(k, randomNumber);               // travering using 'advance' keyword
            // std::cout << (*k)->age << std::endl; // If ever at mem address - should be able to deref ..
        




            /*
        for (std::list<bunny>::iterator i = MyBunnyList.begin(); i != MyBunnyList.end(); ++i)
        {
            MyBunnies.at(*i).SetAge();
            std::cout << "The age of the bunny is: " << MyBunnies.at(i).age << std::endl;
            std::cout << *i << std::endl;
        }*/

    // std::cout << "The age of the bunny is " << MyBunnies(i).age << std::endl;




